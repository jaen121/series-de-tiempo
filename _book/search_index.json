[["index.html", "Series de Tiempo Chapter 1 Justificación uso de datos historicos del precio del maíz", " Series de Tiempo Laura Blanco Rios,Jairo Enrique Alba Talero, Cristian Ruiz Londoño 2024-05-21 Chapter 1 Justificación uso de datos historicos del precio del maíz En el curso se va a trabajar con la base de datos del precio del maíz a través de la historia, con el fin de proyectar su precio futuro. La base datos nos muestra el precio desde el 01-01-2000 hasta el 19-04-2024, consta de las siguientes columnas: - Fecha: Fecha de transacción - Ultimo: Ultimo precio del día, precio de cierre - Apertura: Primer precio del día, precio de apertura - Máximo: Máximo precio en la negociación del día - Mínimo: Mínimo precio en la negociación del día - Vol: Volumen negociado en toneladas - % Var: Porcentaje de variación. Es importante predecir el valor del maíz con el fin de anticipar y mitigar los efectos de la inflación por la posible subida del precio del maíz, esto dado que el maíz es un insumo muy importante para el alimento de aves de corral como lo son, gallinas reproductoras, pollos de engorde y gallinas ponedoras, también desempeña un papel fundamental en la producción de alimento balanceado para cerdos. El maíz representa una proporción significativa, que oscila entre el 50 % y el 70 %, de los ingredientes utilizados en la elaboración de alimentos balanceados para aves de corral y cerdos. Es evidente que el precio del maíz ejerce una influencia directa y proporcional en el costo de la carne de pollo, huevo y cerdo, ya que el alimento balanceado representa la mayor parte de los costos en la producción de aves de corral y cerdo. La industria de alimentos balanceados también depende de la predicción del precio del maíz. Las empresas de alimentos balanceados pueden ajustar sus estrategias de aprovisionamiento y producción para reducir el impacto de los cambios en los costos de materias primas al conocer con anticipación las variaciones en el precio del maíz. Esto a su vez ayuda a mantener estables los precios del alimento balanceado para animales, lo que es esencial para garantizar la rentabilidad y sostenibilidad de sus productos. Además, la predicción del precio del maíz puede ayudar a los gobiernos nacionales y regionales a desarrollar políticas y programas efectivos para proteger la seguridad alimentaria. El gobierno se puede anticipar a posibles aumentos de los costos de alimentos básicos y tomar medidas preventivas para disminuir su impacto negativo en el aumento de precios por el aumento de costos en las materias primas observando de cerca las tendencias del precio del maíz Esto puede incluir la implementación de subsidios alimentarios, programas de asistencia alimentaria y políticas para respaldar la producción agrícola nacional. "],["introducción-a-las-series-de-tiempo.html", "Chapter 2 Introducción a las series de tiempo 2.1 Principales campos donde se aplican las series de tiempo 2.2 Principales pasos para llevar a cabo un aálisis de series de tiempo", " Chapter 2 Introducción a las series de tiempo Una serie de tiempo es una secuencia de datos ordenados en función del tiempo. Estos datos se recopilan en intervalos regulares, como horas, días, meses, años, etc. El objetivo principal de analizar una serie de tiempo es descubrir patrones, tendencias y comportamientos que cambian con el tiempo. Las series de tiempo se utilizan en una amplia variedad de campos, como finanzas, economía, meteorología, ciencias sociales y muchas otras áreas donde se registran datos a lo largo del tiempo. Algunos ejemplos comunes de series de tiempo incluyen el precio de las acciones en bolsa a lo largo del tiempo, las ventas mensuales de una empresa, la temperatura diaria registrada en una región, entre otros. El análisis de series de tiempo implica técnicas como el modelado de tendencias, la detección de estacionalidad, la identificación de patrones cíclicos y la predicción de valores futuros. Estas técnicas son útiles para tomar decisiones informadas y predecir el comportamiento futuro basado en datos históricos. 2.1 Principales campos donde se aplican las series de tiempo Las series de tiempo se utilizan en una amplia variedad de situaciones y campos. Algunas de las situaciones más comunes en las que se utilizan las series de tiempo son: Finanzas y economía: En análisis financiero, las series de tiempo se utilizan para estudiar el rendimiento de acciones, bonos, índices bursátiles y otros instrumentos financieros a lo largo del tiempo. También son fundamentales en el análisis económico para estudiar indicadores como el PIB, la inflación, el desempleo y las tasas de interés a lo largo del tiempo. Ciencias naturales: En campos como la meteorología, la climatología y la oceanografía, las series de tiempo se utilizan para analizar patrones climáticos, temperaturas, niveles de precipitación, concentraciones de gases, entre otros datos ambientales a lo largo del tiempo. Ingeniería y tecnología: En ingeniería eléctrica, mecánica y civil, las series de tiempo se utilizan para monitorear el rendimiento de sistemas, predecir fallas, analizar el comportamiento de estructuras y realizar mantenimiento predictivo. Ciencias de la salud: En medicina y epidemiología, las series de tiempo se utilizan para analizar tendencias en la propagación de enfermedades, estudiar la eficacia de tratamientos médicos, analizar datos de pacientes a lo largo del tiempo y realizar proyecciones epidemiológicas. Marketing y ventas: En análisis de mercado, las series de tiempo se utilizan para estudiar tendencias de ventas, patrones estacionales, efectividad de campañas de marketing, demanda de productos y pronósticos de ventas. Investigación social: En sociología, psicología y ciencias sociales en general, las series de tiempo se utilizan para estudiar tendencias sociales, cambios de actitudes, análisis de encuestas a lo largo del tiempo y estudios longitudinales. Por lo tanto las series de tiempo son herramientas poderosas que se utilizan en una amplia gama de disciplinas para analizar patrones, tendencias y cambios a lo largo del tiempo, lo que permite tomar decisiones informadas y realizar pronósticos precisos. 2.2 Principales pasos para llevar a cabo un aálisis de series de tiempo El análisis de series de tiempo se refiere al proceso de analizar los datos disponibles para descubrir el patrón o la tendencia en los datos. Permite extraer y modelar las relaciones entre datos a lo largo del tiempo, sea extrapolando (hacia futuro) o interpolando (hacia el pasado) el comportamiento de datos no observados. En general los análisis de series de tiempo tienen los siguientes tres pasos: Análisis exploratorio Escogencia y ajuste del modelo Diagnóstico "],["importación-de-datos.html", "Chapter 3 Importación de Datos", " Chapter 3 Importación de Datos Los datos a trabajar se obtuvieron de https://es.investing.com/commodities/us-corn-streaming-chart y corresponden al mercado de maiz, durante los años. Se importa la matriz de datos # Importar datos desde un archivo CSV desde github 2.0 ruta_archivo &lt;- &quot;Datos históricos Futuruos maíz EE.UU. 2000-2024 Importar.csv&quot; df_maiz &lt;- read.csv(ruta_archivo, sep = &quot;;&quot;,fileEncoding = &quot;UTF-8&quot;) names(df_maiz) ## [1] &quot;Fecha&quot; &quot;Último&quot; &quot;Apertura&quot; &quot;Máximo&quot; &quot;Mínimo&quot; &quot;Vol.&quot; &quot;X..var.&quot; head(df_maiz) ## Fecha Último Apertura Máximo Mínimo Vol. X..var. ## 1 19/04/2024 433.50 427.10 433.90 426.88 1.58% ## 2 18/04/2024 426.75 429.50 431.00 426.25 180.78K -0.81% ## 3 17/04/2024 430.25 431.00 433.00 429.50 139.24K -0.17% ## 4 16/04/2024 431.00 431.25 432.25 428.50 148.12K -0.12% ## 5 15/04/2024 431.50 434.50 435.00 430.25 152.25K -0.92% ## 6 12/04/2024 435.50 428.25 437.50 427.00 202.05K 1.57% La base datos nos muestra el precio desde el 01-01-2000 hasta el 19-04-2024, consta de las siguientes columnas: - Fecha: Fecha de transacción - Ultimo: Ultimo precio del día, precio de cierre - Apertura: Primer precio del día, precio de apertura - Máximo: Máximo precio en la negociación del día - Mínimo: Mínimo precio en la negociación del día - Vol: Volumen negociado en toneladas - % Var: Porcentaje de variación. "],["análisis-descriptivo-y-filtro-base-de-datos.html", "Chapter 4 Análisis descriptivo y filtro base de datos 4.1 Filtro de datos. 4.2 Analisis Descriptivo", " Chapter 4 Análisis descriptivo y filtro base de datos 4.1 Filtro de datos. Considerando que el foco principal de este ejercicio recae en la variable objetivo último, se opta por construir un nuevo data frame que contenga exclusivamente la fecha y el valor de último. #data frame filtrado df_maiz_filtrado &lt;- df_maiz[, c(&quot;Fecha&quot;, &quot;Último&quot;)] head(df_maiz_filtrado, 5) ## Fecha Último ## 1 19/04/2024 433.50 ## 2 18/04/2024 426.75 ## 3 17/04/2024 430.25 ## 4 16/04/2024 431.00 ## 5 15/04/2024 431.50 4.2 Analisis Descriptivo A continuación se estudiarán los estadísticos descriptivos de la matriz de datos: str(df_maiz_filtrado) ## &#39;data.frame&#39;: 6170 obs. of 2 variables: ## $ Fecha : chr &quot;19/04/2024&quot; &quot;18/04/2024&quot; &quot;17/04/2024&quot; &quot;16/04/2024&quot; ... ## $ Último: num 434 427 430 431 432 ... Teniendo en cuenta que la variable Fecha se encuentra categorizada como caracter y no como fecha, se convierte esta columna a tipo fecha #Convertir fecha en formato fecha df_maiz_filtrado$Fecha &lt;- as.Date(df_maiz_filtrado$Fecha, format = &quot;%d/%m/%Y&quot;) #validar str(df_maiz_filtrado) ## &#39;data.frame&#39;: 6170 obs. of 2 variables: ## $ Fecha : Date, format: &quot;2024-04-19&quot; &quot;2024-04-18&quot; ... ## $ Último: num 434 427 430 431 432 ... #install.packages(&quot;skimr&quot;) skimr::skim(df_maiz_filtrado) Table 4.1: Data summary Name df_maiz_filtrado Number of rows 6170 Number of columns 2 _______________________ Column type frequency: Date 1 numeric 1 ________________________ Group variables None Variable type: Date skim_variable n_missing complete_rate min max median n_unique Fecha 0 1 2000-01-03 2024-04-19 2012-03-08 6170 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist Último 0 1 409.31 159.8 182.5 268.25 374.75 509.69 838.75  De la salida anterior podemos visualizar que se presentan 6170 registros, el data frame tiene datos que van desde el 03 de Enero del año 2000 hasta el 19 de abril del año 2024, el precio de cierre del maíz en este periodo de tiempo tiene una media de 409 dolares con una desviación estándar de 159 dolares, el valor mínimo se encuentra en 182,5 dolares y el precio máximo en 838.75 dolares. Ahora, se va analizar el precio de cierre por día de la semana. #Crear una columna que muestre el día de la semana df_maiz_filtrado$Dia_Semana &lt;- weekdays(as.Date(df_maiz_filtrado$Fecha)) head(df_maiz_filtrado, 5) ## Fecha Último Dia_Semana ## 1 2024-04-19 433.50 viernes ## 2 2024-04-18 426.75 jueves ## 3 2024-04-17 430.25 miércoles ## 4 2024-04-16 431.00 martes ## 5 2024-04-15 431.50 lunes #Ordenar la variable Dia_Semana df_maiz_filtrado$Dia_Semana &lt;- factor(df_maiz_filtrado$Dia_Semana, levels = c(&quot;lunes&quot;, &quot;martes&quot;, &quot;miércoles&quot;, &quot;jueves&quot;, &quot;viernes&quot;, &quot;sábado&quot;, &quot;domingo&quot;)) #Cargar libreria para graficar #install.packages(&quot;ggplot2&quot;) library(ggplot2) # Crear el gráfico de barras de la frecuencia por día de la semana ggplot(df_maiz_filtrado, aes(x = Dia_Semana, fill = Dia_Semana)) + geom_bar() + #Grafico de barras geom_text( stat = &quot;count&quot;, aes(label = ..count..), vjust = -0.5) + #Agregar etiquetas labs(x = &quot;Día de la semana&quot;, y = &quot;Frecuencia&quot;, title = &quot;Frecuencia por día de la semana&quot;) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) ## Warning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0. ## i Please use `after_stat(count)` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. Dado que los días domingos no se generan transacciones en la bolsa y que los datos que se tienen los días domingos solo son 9 en 24 años de historia se decide eliminar estos datos. #Creando data frame sin el domingo df_maiz_SD &lt;- subset(df_maiz_filtrado, Dia_Semana != &quot;domingo&quot;) #validando filtro unique(df_maiz_SD$Dia_Semana) ## [1] viernes jueves miércoles martes lunes ## Levels: lunes martes miércoles jueves viernes sábado domingo # Crear el gráfico de boxplot por semana ggplot(df_maiz_SD, aes(x = Dia_Semana, y = Último)) + geom_boxplot(fill = &quot;skyblue&quot;, color = &quot;blue&quot;) + labs(x = &quot;Día de la semana&quot;, y = &quot;Último&quot;) "],["series-de-tiempo.html", "Chapter 5 Series de Tiempo 5.1 Aproximación en media móvil 5.2 Componentes de una Serie de Tiempo 5.3 Estacionalidad", " Chapter 5 Series de Tiempo Convertimos la matriz de datos en series de tiempo #install.packages(&quot;xts&quot;) # Carga el paquete xts library(xts) ## Warning: package &#39;xts&#39; was built under R version 4.1.3 ## Loading required package: zoo ## Warning: package &#39;zoo&#39; was built under R version 4.1.3 ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric # Asegúrarse de que la columna &#39;Fecha&#39; esté en formato de fecha #SI SE EJECUTA DE NUEVO SE DEBE VOLVER A CARGAR #df_maiz_filtrado$Fecha &lt;- as.Date(df_maiz_filtrado$Fecha) # Crea una serie de tiempo con la función ts df_maiz_filtradots &lt;- ts(df_maiz_filtrado$Último, start = c(2000, 1), frequency=261.25) #df_maiz_filtradots #revisamos que sea una clase ts class(df_maiz_filtradots) ## [1] &quot;ts&quot; #Corroboramos el inicio de la serie start(df_maiz_filtradots) ## [1] 2000 Graficamos la serie de tiempo por días desde 03 de Enero del año 2000 hasta el 19 de abril del año 2024, excluyendo los fines de semanaaa # Graficar la serie de tiempo usando la función plot plot(df_maiz_filtradots, main = &quot;Serie de Tiempo de Último Precio del Maíz&quot;, xlab = &quot;Fecha&quot;, ylab = &quot;Precio&quot;, type = &quot;l&quot;) 5.1 Aproximación en media móvil Una parte importante del análisis descriptivo de un conjunto de datos son los indicadores de tendencia central, entre ellos, la media. Sin embargo, en el contexto del análisis de series de tiempo, este indicador puede aumentar su sensibilidad, pues la vulnerabilidad de los datos a cambios impredecibles es más alta que en otros conjuntos de datos. Es por eso que se plantea la media móvil, que se define como el promedio de los datos en una ventana de tiempo, es decir, se toma la media de un intervalo de los datos, en vez de la media de los datos en su totalidad. Esto reduce la variabilidad y se puede utilizar para una mejor descripción de estaciones o ventanas de tiempo específicas. A continuación se pueden observar diferentes ejemplo de aproximación de los datos a través de la media móvil con diversos k, en dónde k representa el tamaño del intervalo tomado: # Calcula el promedio móvil k = 10 promedio_movil &lt;- rollmean(df_maiz_filtradots, k = 10, align = &quot;center&quot;, fill = NA) # Gráfico comparativo k = 10 plot(df_maiz_filtradots, type = &quot;l&quot;, col = &quot;black&quot;, lwd = 2, xlab =&quot;Fecha&quot;, ylab =&quot;Precio&quot;, main = &quot;Aproximación en Promedio Móvil con k = 10&quot;) lines(promedio_movil, col = &quot;red&quot;, lwd = 2, lty = 2) legend(&quot;topright&quot;, legend = c(&quot;Serie Original&quot;, &quot;Promedio Móvil&quot;), col = c(&quot;black&quot;, &quot;red&quot;), lty = c(1, 2), lwd = 2) # Calcula el promedio móvil k = 50 promedio_movil &lt;- rollmean(df_maiz_filtradots, k = 50, align = &quot;center&quot;, fill = NA) # Gráfico comparativo k = 50 plot(df_maiz_filtradots, type = &quot;l&quot;, col = &quot;black&quot;, lwd = 2, xlab =&quot;Fecha&quot;, ylab =&quot;Precio&quot;, main = &quot;Aproximación en Promedio Móvil con k = 50&quot;) lines(promedio_movil, col = &quot;red&quot;, lwd = 2, lty = 2) legend(&quot;topright&quot;, legend = c(&quot;Serie Original&quot;, &quot;Promedio Móvil&quot;), col = c(&quot;black&quot;, &quot;red&quot;), lty = c(1, 2), lwd = 2) # Calcula el promedio móvil k = 100 promedio_movil &lt;- rollmean(df_maiz_filtradots, k = 100, align = &quot;center&quot;, fill = NA) # Gráfico comparativo k = 100 plot(df_maiz_filtradots, type = &quot;l&quot;, col = &quot;black&quot;, lwd = 2, xlab =&quot;Fecha&quot;, ylab =&quot;Precio&quot;, main = &quot;Aproximación en Promedio Móvil con k = 100&quot;) lines(promedio_movil, col = &quot;red&quot;, lwd = 2, lty = 2) legend(&quot;topright&quot;, legend = c(&quot;Serie Original&quot;, &quot;Promedio Móvil&quot;), col = c(&quot;black&quot;, &quot;red&quot;), lty = c(1, 2), lwd = 2) # Calcula el promedio móvil k = 500 promedio_movil &lt;- rollmean(df_maiz_filtradots, k = 500, align = &quot;center&quot;, fill = NA) # Gráfico comparativo k = 500 plot(df_maiz_filtradots, type = &quot;l&quot;, col = &quot;black&quot;, lwd = 2, xlab =&quot;Fecha&quot;, ylab =&quot;Precio&quot;, main = &quot;Aproximación en Promedio Móvil con k = 500&quot;) lines(promedio_movil, col = &quot;red&quot;, lwd = 2, lty = 2) legend(&quot;topright&quot;, legend = c(&quot;Serie Original&quot;, &quot;Promedio Móvil&quot;), col = c(&quot;black&quot;, &quot;red&quot;), lty = c(1, 2), lwd = 2) 5.2 Componentes de una Serie de Tiempo Las series de tiempo pueden descomponerse en varias componentes que ayudan a comprender la estructura y los patrones presentes en los datos a lo largo del tiempo. Las principales componentes de una serie de tiempo son: Tendencia: Representa la dirección general de los datos a largo plazo. Puede ser ascendente, descendente o plana. La tendencia captura cambios graduales y persistentes en los datos a lo largo del tiempo. Estacionalidad: Se refiere a patrones recurrentes o cíclicos que se repiten en la serie de tiempo a intervalos fijos de tiempo, como diarios, semanales, mensuales o anuales. La estacionalidad puede ser causada por factores como la temporada, eventos naturales o económicos. Ciclo: Es similar a la estacionalidad, pero con una duración más larga y menos regular. Los ciclos representan fluctuaciones económicas o patrones de negocios que se repiten en períodos de varios años. Variación aleatoria o ruido: Es la parte no sistemática o irregular de la serie de tiempo que no puede explicarse por la tendencia, la estacionalidad o el ciclo. La variación aleatoria puede deberse a factores aleatorios o eventos impredecibles que afectan los datos. 5.3 Estacionalidad #install.packages(&quot;aTSA&quot;) library(aTSA) ## ## Attaching package: &#39;aTSA&#39; ## The following object is masked from &#39;package:graphics&#39;: ## ## identify library(aTSA) adf.test(df_maiz_filtradots) ## Augmented Dickey-Fuller Test ## alternative: stationary ## ## Type 1: no drift no trend ## lag ADF p.value ## [1,] 0 -0.998 0.322 ## [2,] 1 -0.999 0.322 ## [3,] 2 -0.988 0.326 ## [4,] 3 -1.005 0.320 ## [5,] 4 -0.999 0.322 ## [6,] 5 -1.001 0.321 ## [7,] 6 -0.998 0.322 ## [8,] 7 -1.017 0.315 ## [9,] 8 -1.014 0.317 ## [10,] 9 -1.018 0.315 ## Type 2: with drift no trend ## lag ADF p.value ## [1,] 0 -1.87 0.381 ## [2,] 1 -1.91 0.362 ## [3,] 2 -1.84 0.391 ## [4,] 3 -1.91 0.362 ## [5,] 4 -1.88 0.374 ## [6,] 5 -1.87 0.380 ## [7,] 6 -1.90 0.367 ## [8,] 7 -1.95 0.349 ## [9,] 8 -1.95 0.346 ## [10,] 9 -1.94 0.351 ## Type 3: with drift and trend ## lag ADF p.value ## [1,] 0 -2.58 0.332 ## [2,] 1 -2.64 0.305 ## [3,] 2 -2.56 0.341 ## [4,] 3 -2.64 0.308 ## [5,] 4 -2.60 0.322 ## [6,] 5 -2.58 0.331 ## [7,] 6 -2.63 0.311 ## [8,] 7 -2.67 0.294 ## [9,] 8 -2.68 0.289 ## [10,] 9 -2.66 0.297 ## ---- ## Note: in fact, p.value = 0.01 means p.value &lt;= 0.01 # Calcular la función de autocorrelación acf_result &lt;- acf(df_maiz_filtradots, plot = FALSE) # Trazar la función de autocorrelación plot(acf_result, main = &quot;Función de Autocorrelación&quot;) Trazada ya la serie df_maiz_filtradot, se puede determinar que no presenta una tendencia ascendente o descendente por lo tanto la serie parece ser estacionaria en media. Aplicando la prueba de Dickey-Fuller donde la hipótesis nula de aumentada es que la serie de tiempo tiene una raíz unitaria, lo que significa que no es estacionaria y la hipótesis alternativa es que la serie de tiempo es estacionaria. La prueba arroja un p valor de 0.01 evidenciando que la serie es estacionaria. # Calcular la descomposición estacional descomposicion &lt;- stl(df_maiz_filtradots, s.window = &quot;periodic&quot;) # Trazar la descomposición plot(descomposicion, col = &quot;blue&quot;) La gráfica generada por la función stl muestra la descomposición estacional de una serie de tiempo en tres componentes principales: tendencia, estacionalidad y residuos. Estacionalidad: La parte intermedia de la gráfica muestra la estacionalidad de la serie de tiempo. Esto representa patrones recurrentes o cíclicos que se repiten a intervalos regulares. Por ejemplo, si la serie de tiempo representa datos mensuales, la estacionalidad mostrará patrones que se repiten cada año. Tendencia: La línea suavizada en la parte superior de la gráfica representa la tendencia de la serie de tiempo. La tendencia muestra la dirección general en la que los datos están cambiando a lo largo del tiempo. Una tendencia ascendente indica un crecimiento en los datos, una tendencia descendente indica una disminución, y una tendencia plana sugiere estabilidad. Residuos: La parte inferior de la gráfica muestra los residuos, que son las fluctuaciones aleatorias o irregulares que no pueden ser explicadas por la tendencia o la estacionalidad. Los residuos representan la variación aleatoria en los datos que queda después de eliminar la tendencia y la estacionalidad. &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD "],["modelo-de-holt-winters.html", "Chapter 6 Modelo de Holt-Winters 6.1 Modelo de suavizado exponencial simple (SES, por sus siglas en inglés) 6.2 Método Holt-Winters para Predicciones", " Chapter 6 Modelo de Holt-Winters 6.1 Modelo de suavizado exponencial simple (SES, por sus siglas en inglés) Es un modelo de suavizado exponencial simple (SES, por sus siglas en inglés). En términos generales, el suavizado exponencial simple es un método de pronóstico que utiliza un único factor de suavizado (alpha) para dar más peso a las observaciones más recientes mientras suaviza las fluctuaciones aleatorias. El modelo SES se define por la siguiente ecuación de recursividad: \\[ \\hat{y}_{t+1} = \\alpha \\cdot y_t + (1 - \\alpha) \\cdot \\hat{y}_t \\] Donde: - \\(\\hat{y}_{t+1}\\) es el pronóstico para el siguiente periodo, - \\(y_t\\) es la observación actual en el periodo \\(t\\), - \\(\\hat{y}_t\\) es el pronóstico actual en el periodo \\(t\\), y - \\(\\alpha\\) es el factor de suavizado, que controla cuánto peso se le da a la observación actual versus el pronóstico anterior. # Verificar la cantidad de períodos en la serie temporal cantidad_periodos &lt;- length(df_maiz_filtradots) print(cantidad_periodos) ## [1] 6170 library(forecast) ## Warning: package &#39;forecast&#39; was built under R version 4.1.3 ## Registered S3 method overwritten by &#39;quantmod&#39;: ## method from ## as.zoo.data.frame zoo ## ## Attaching package: &#39;forecast&#39; ## The following object is masked from &#39;package:aTSA&#39;: ## ## forecast # Ajustar un modelo de suavizado exponencial simple modelo_ses &lt;- ses(df_maiz_filtradots) # Imprimir el modelo print(modelo_ses) ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 2023.617 208.0002 197.2733 218.7271 191.5948 224.4056 ## 2023.621 208.0002 192.8308 223.1696 184.8006 231.1998 ## 2023.625 208.0002 189.4219 226.5785 179.5871 236.4133 ## 2023.629 208.0002 186.5480 229.4524 175.1918 240.8085 ## 2023.633 208.0002 184.0160 231.9844 171.3195 244.6808 ## 2023.636 208.0002 181.7269 234.2734 167.8187 248.1817 ## 2023.640 208.0002 179.6219 236.3785 164.5993 251.4011 ## 2023.644 208.0002 177.6625 238.3378 161.6028 254.3976 ## 2023.648 208.0002 175.8223 240.1781 158.7884 257.2120 ## 2023.652 208.0002 174.0818 241.9186 156.1264 259.8739 la salida anterior presenta los intervalos de confianza de los pronosticos, del valor del precio del maiz. 6.2 Método Holt-Winters para Predicciones El Método Holt-Winters es un modelo de suavizado exponencial ampliamente utilizado para el pronóstico de series temporales que exhiben tendencia y estacionalidad. Este método es una extensión del suavizado exponencial simple (SES)presentado anteriormente, que también tiene en cuenta la componente de tendencia y la componente estacional de la serie temporal. Una explicación del Método Holt-Winters: Componente de Nivel (Nivel): El Método Holt-Winters comienza con la estimación de un nivel inicial. Este nivel inicial se representa como \\(L_0\\). El nivel actual se calcula utilizando una combinación lineal de la observación actual y el nivel anterior. La fórmula para calcular el nivel actual es: \\[ L_t = \\alpha \\times Y_t + (1 - \\alpha) \\times (L_{t-1} + T_{t-1}) \\] donde: \\(L_t\\) es el nivel en el tiempo \\(t\\). \\(Y_t\\) es la observación en el tiempo \\(t\\). \\(\\alpha\\) es la constante de suavizado para la componente de nivel. Controla cuánto peso se le da a la observación actual en la estimación del nivel. \\(T_{t-1}\\) es la estimación de la tendencia en el tiempo \\(t-1\\). Componente de Tendencia (Tendencia): La tendencia representa la dirección general de los datos a lo largo del tiempo. El Método Holt-Winters utiliza una estimación inicial de la tendencia, que se representa como \\(T_0\\). La tendencia actual se calcula utilizando una combinación lineal de la estimación de la tendencia anterior y la diferencia entre el nivel actual y el nivel anterior. La fórmula para calcular la tendencia actual es: \\[ T_t = \\beta \\times (L_t - L_{t-1}) + (1 - \\beta) \\times T_{t-1} \\] donde: \\(T_t\\) es la tendencia en el tiempo \\(t\\). \\(\\beta\\) es la constante de suavizado para la componente de tendencia. Controla cuánto peso se le da a la estimación de la tendencia anterior en la estimación de la tendencia actual. Componente Estacional (Estacionalidad): La estacionalidad representa patrones periódicos en los datos, como estacionalidad mensual, trimestral o anual. El Método Holt-Winters puede manejar estacionalidad aditiva o multiplicativa, dependiendo de la naturaleza de la variación estacional en los datos. La estacionalidad actual se calcula utilizando una combinación lineal de la estimación de la estacionalidad anterior y la observación actual. La fórmula para calcular la estacionalidad actual es: Estacionalidad Aditiva: \\[ S_t = \\gamma \\times (Y_t - L_t) + (1 - \\gamma) \\times S_{t-m} \\] Estacionalidad Multiplicativa: \\[ S_t = \\gamma \\times \\frac{Y_t}{L_t} + (1 - \\gamma) \\times S_{t-m} \\] donde: \\(S_t\\) es la estacionalidad en el tiempo \\(t\\). \\(\\gamma\\) es la constante de suavizado para la componente de estacionalidad. Controla cuánto peso se le da a la observación actual en la estimación de la estacionalidad actual. \\(m\\) es el número de períodos en una temporada. Pronósticos: Una vez que se han estimado los componentes de nivel, tendencia y estacionalidad, se pueden hacer pronósticos para periodos futuros. Los pronósticos futuros se calculan extrapolando los componentes de nivel, tendencia y estacionalidad estimados. Los intervalos de predicción también se pueden calcular para tener en cuenta la incertidumbre en los pronósticos. En resumen, el Método Holt-Winters es un método de suavizado exponencial que se utiliza para pronosticar series temporales con tendencia y estacionalidad. Utiliza tres componentes (nivel, tendencia y estacionalidad) que se actualizan en cada periodo para proporcionar pronósticos precisos y ajustados a los datos históricos observados. library(xts) # Crea una serie de tiempo con la función ts, se cambio a frecuencia 261 df_maiz_filtradots1 &lt;- ts(df_maiz_filtrado$Último, start = c(2000, 1), frequency=261) # Ajustar un modelo Holt-Winters modelo_hw &lt;- HoltWinters(df_maiz_filtradots1) modelo_hw ## Holt-Winters exponential smoothing with trend and additive seasonal component. ## ## Call: ## HoltWinters(x = df_maiz_filtradots1) ## ## Smoothing parameters: ## alpha: 0.8411595 ## beta : 0.0007756481 ## gamma: 1 ## ## Coefficients: ## [,1] ## a 272.638802752 ## b -0.009577179 ## s1 -62.461810071 ## s2 -60.078003774 ## s3 -60.363866627 ## s4 -64.721022778 ## s5 -64.952767445 ## s6 -62.726789470 ## s7 -61.644041620 ## s8 -63.196613765 ## s9 -65.460694849 ## s10 -63.743866583 ## s11 -62.474015682 ## s12 -61.638456078 ## s13 -61.205577225 ## s14 -65.668144365 ## s15 -68.125356097 ## s16 -68.658829628 ## s17 -64.404877247 ## s18 -58.754144653 ## s19 -53.061724496 ## s20 -49.215087790 ## s21 -41.223298162 ## s22 -30.393886348 ## s23 -17.107273915 ## s24 -10.394951817 ## s25 -10.187964706 ## s26 -10.935780595 ## s27 -14.992048306 ## s28 -18.901265047 ## s29 -20.424364120 ## s30 -18.701448987 ## s31 -15.246386125 ## s32 -9.719715189 ## s33 -8.655289020 ## s34 -4.653388050 ## s35 -3.598217303 ## s36 -4.031099066 ## s37 -5.716882722 ## s38 -5.535852972 ## s39 -5.104401966 ## s40 -4.249930012 ## s41 0.290138158 ## s42 10.706132283 ## s43 25.654374686 ## s44 41.515922006 ## s45 53.428899239 ## s46 64.012161893 ## s47 69.146854594 ## s48 69.653525484 ## s49 64.133476810 ## s50 55.563895259 ## s51 47.322651718 ## s52 41.424587101 ## s53 38.578956403 ## s54 36.200954546 ## s55 32.615223094 ## s56 27.937920061 ## s57 24.452810901 ## s58 22.610423296 ## s59 19.741319619 ## s60 16.352139203 ## s61 13.593527464 ## s62 13.537490985 ## s63 13.378394701 ## s64 8.879626260 ## s65 4.089622238 ## s66 -2.732229074 ## s67 -12.668666507 ## s68 -19.853673124 ## s69 -23.607825668 ## s70 -22.034104701 ## s71 -16.471143984 ## s72 -7.814253728 ## s73 3.547774892 ## s74 15.458821527 ## s75 27.722671131 ## s76 36.883900252 ## s77 43.172714209 ## s78 47.311532405 ## s79 49.115637863 ## s80 46.385338341 ## s81 43.052251343 ## s82 39.706711662 ## s83 35.127387850 ## s84 33.553376302 ## s85 37.088016675 ## s86 40.402880534 ## s87 44.398109879 ## s88 48.621174470 ## s89 53.023011180 ## s90 57.124701583 ## s91 59.223033253 ## s92 58.293867470 ## s93 57.935764721 ## s94 52.312809143 ## s95 47.006392265 ## s96 41.235826557 ## s97 37.840434672 ## s98 37.189696360 ## s99 34.683421349 ## s100 38.067569916 ## s101 39.795677803 ## s102 42.116164555 ## s103 41.667620609 ## s104 39.066413796 ## s105 33.318646623 ## s106 32.094289854 ## s107 28.221003317 ## s108 21.686293665 ## s109 17.453732187 ## s110 14.835021997 ## s111 13.196170995 ## s112 15.094416745 ## s113 13.982588028 ## s114 10.664215176 ## s115 6.271550171 ## s116 3.599446685 ## s117 -0.712480699 ## s118 -4.262275138 ## s119 -5.194357387 ## s120 -3.872967287 ## s121 -3.721158412 ## s122 -2.784159398 ## s123 0.748601059 ## s124 4.469272342 ## s125 5.085818781 ## s126 6.480672705 ## s127 9.163383112 ## s128 12.921657580 ## s129 17.124245171 ## s130 20.165791135 ## s131 27.075403758 ## s132 31.056400505 ## s133 36.615956681 ## s134 38.122044860 ## s135 38.319430753 ## s136 36.362465329 ## s137 35.572167534 ## s138 35.556606040 ## s139 38.255202628 ## s140 37.417898904 ## s141 38.556023785 ## s142 35.696652247 ## s143 34.013432251 ## s144 32.152451096 ## s145 34.139284003 ## s146 34.274481413 ## s147 34.138436276 ## s148 32.613082052 ## s149 31.899409643 ## s150 32.052889642 ## s151 33.437744944 ## s152 29.668708008 ## s153 26.660921021 ## s154 25.964667688 ## s155 21.749662217 ## s156 19.343177677 ## s157 17.352862849 ## s158 14.731647526 ## s159 12.352703622 ## s160 8.774318338 ## s161 4.569574530 ## s162 6.246887127 ## s163 6.727255649 ## s164 10.125916264 ## s165 13.909948516 ## s166 16.924786237 ## s167 17.098353092 ## s168 17.052007819 ## s169 13.427073281 ## s170 7.605503071 ## s171 3.668800176 ## s172 -0.576012316 ## s173 -4.394618268 ## s174 -5.819758710 ## s175 -8.599170670 ## s176 -13.296419144 ## s177 -17.642983308 ## s178 -21.352290411 ## s179 -27.919208120 ## s180 -32.510889931 ## s181 -34.408021278 ## s182 -34.339842149 ## s183 -33.063362119 ## s184 -31.309723844 ## s185 -25.018286223 ## s186 -20.332264339 ## s187 -14.841027462 ## s188 -9.185497500 ## s189 -6.273193402 ## s190 -5.796127540 ## s191 -5.431318297 ## s192 -7.815935249 ## s193 -7.226471569 ## s194 -8.289452780 ## s195 -10.285471336 ## s196 -13.477363439 ## s197 -17.069519533 ## s198 -17.409184054 ## s199 -14.988777844 ## s200 -14.319131816 ## s201 -13.394311108 ## s202 -10.046355470 ## s203 -5.673557081 ## s204 -3.258379800 ## s205 -2.140356296 ## s206 -0.281584681 ## s207 -1.805013822 ## s208 1.335348642 ## s209 4.324317972 ## s210 4.025761628 ## s211 1.001216109 ## s212 -2.040371412 ## s213 -2.893767077 ## s214 -3.603390918 ## s215 -6.864036340 ## s216 -9.465191137 ## s217 -10.167131677 ## s218 -8.678279180 ## s219 -7.075821212 ## s220 -2.970691232 ## s221 -3.773080792 ## s222 -4.356840944 ## s223 -5.321527328 ## s224 -7.335870713 ## s225 -8.826422136 ## s226 -13.239146522 ## s227 -14.588311983 ## s228 -18.297961585 ## s229 -20.104753017 ## s230 -22.338447389 ## s231 -22.921202409 ## s232 -22.228981298 ## s233 -20.798411187 ## s234 -20.181056447 ## s235 -23.348776078 ## s236 -25.941464495 ## s237 -26.473041071 ## s238 -27.996884446 ## s239 -27.255861520 ## s240 -28.515218178 ## s241 -29.618813398 ## s242 -31.145377444 ## s243 -33.179398191 ## s244 -37.173461416 ## s245 -38.690467585 ## s246 -38.729294496 ## s247 -41.489349834 ## s248 -46.918766855 ## s249 -50.833261401 ## s250 -53.507231814 ## s251 -56.802225122 ## s252 -58.088588730 ## s253 -57.470816612 ## s254 -58.524551260 ## s255 -63.083490396 ## s256 -63.908105272 ## s257 -66.209090410 ## s258 -68.982452001 ## s259 -68.568729011 ## s260 -66.670745061 ## s261 -64.638802752 plot(modelo_hw) A continuación se presenta la predicción para el siguiente año forecast &lt;- predict(modelo_hw, n.ahead = 261, prediction.interval = T, level = 0.95) plot(modelo_hw, forecast) "],["metodología-box-jenkins.html", "Chapter 7 Metodología Box-Jenkins 7.1 visualizar la serie 7.2 Trasnformación de la serie en estacionaria 7.3 Graficar ACF-PACF, Escoger los parametros 7.4 Definición del modelo 7.5 Predicción", " Chapter 7 Metodología Box-Jenkins 7.1 visualizar la serie # Gráfico de la serie ts.plot(df_maiz_filtradots, main = &quot;PRECIO DEL MAIZ POR DÍA&quot;, col = &quot;darkgreen&quot;) 7.2 Trasnformación de la serie en estacionaria #transformar la serie dif_dia &lt;- diff(df_maiz_filtradots) variacion_dia &lt;- diff(df_maiz_filtradots) / lag(df_maiz_filtradots, -1) # Gráfico de la serie ts.plot(dif_dia, main = &quot;Diferencia&quot;, col = &quot;darkblue&quot;) ts.plot(variacion_dia, main = &quot;Variación&quot;, col = &quot;darkred&quot;) Validar estacionariedad de las series #prueba de estacionariedad adf.test(df_maiz_filtradots) ## Augmented Dickey-Fuller Test ## alternative: stationary ## ## Type 1: no drift no trend ## lag ADF p.value ## [1,] 0 -0.998 0.322 ## [2,] 1 -0.999 0.322 ## [3,] 2 -0.988 0.326 ## [4,] 3 -1.005 0.320 ## [5,] 4 -0.999 0.322 ## [6,] 5 -1.001 0.321 ## [7,] 6 -0.998 0.322 ## [8,] 7 -1.017 0.315 ## [9,] 8 -1.014 0.317 ## [10,] 9 -1.018 0.315 ## Type 2: with drift no trend ## lag ADF p.value ## [1,] 0 -1.87 0.381 ## [2,] 1 -1.91 0.362 ## [3,] 2 -1.84 0.391 ## [4,] 3 -1.91 0.362 ## [5,] 4 -1.88 0.374 ## [6,] 5 -1.87 0.380 ## [7,] 6 -1.90 0.367 ## [8,] 7 -1.95 0.349 ## [9,] 8 -1.95 0.346 ## [10,] 9 -1.94 0.351 ## Type 3: with drift and trend ## lag ADF p.value ## [1,] 0 -2.58 0.332 ## [2,] 1 -2.64 0.305 ## [3,] 2 -2.56 0.341 ## [4,] 3 -2.64 0.308 ## [5,] 4 -2.60 0.322 ## [6,] 5 -2.58 0.331 ## [7,] 6 -2.63 0.311 ## [8,] 7 -2.67 0.294 ## [9,] 8 -2.68 0.289 ## [10,] 9 -2.66 0.297 ## ---- ## Note: in fact, p.value = 0.01 means p.value &lt;= 0.01 adf.test(dif_dia) ## Augmented Dickey-Fuller Test ## alternative: stationary ## ## Type 1: no drift no trend ## lag ADF p.value ## [1,] 0 -76.9 0.01 ## [2,] 1 -56.8 0.01 ## [3,] 2 -44.5 0.01 ## [4,] 3 -39.3 0.01 ## [5,] 4 -35.4 0.01 ## [6,] 5 -31.7 0.01 ## [7,] 6 -28.9 0.01 ## [8,] 7 -27.0 0.01 ## [9,] 8 -25.7 0.01 ## [10,] 9 -24.1 0.01 ## Type 2: with drift no trend ## lag ADF p.value ## [1,] 0 -76.9 0.01 ## [2,] 1 -56.8 0.01 ## [3,] 2 -44.5 0.01 ## [4,] 3 -39.3 0.01 ## [5,] 4 -35.4 0.01 ## [6,] 5 -31.7 0.01 ## [7,] 6 -28.9 0.01 ## [8,] 7 -27.0 0.01 ## [9,] 8 -25.7 0.01 ## [10,] 9 -24.1 0.01 ## Type 3: with drift and trend ## lag ADF p.value ## [1,] 0 -76.9 0.01 ## [2,] 1 -56.8 0.01 ## [3,] 2 -44.5 0.01 ## [4,] 3 -39.3 0.01 ## [5,] 4 -35.4 0.01 ## [6,] 5 -31.7 0.01 ## [7,] 6 -28.9 0.01 ## [8,] 7 -27.0 0.01 ## [9,] 8 -25.7 0.01 ## [10,] 9 -24.1 0.01 ## ---- ## Note: in fact, p.value = 0.01 means p.value &lt;= 0.01 adf.test(variacion_dia) ## Augmented Dickey-Fuller Test ## alternative: stationary ## ## Type 1: no drift no trend ## lag ADF p.value ## [1,] 0 -76.9 0.01 ## [2,] 1 -56.3 0.01 ## [3,] 2 -45.0 0.01 ## [4,] 3 -39.3 0.01 ## [5,] 4 -35.7 0.01 ## [6,] 5 -32.4 0.01 ## [7,] 6 -30.0 0.01 ## [8,] 7 -27.9 0.01 ## [9,] 8 -26.1 0.01 ## [10,] 9 -24.4 0.01 ## Type 2: with drift no trend ## lag ADF p.value ## [1,] 0 -76.9 0.01 ## [2,] 1 -56.3 0.01 ## [3,] 2 -45.0 0.01 ## [4,] 3 -39.3 0.01 ## [5,] 4 -35.7 0.01 ## [6,] 5 -32.4 0.01 ## [7,] 6 -29.9 0.01 ## [8,] 7 -27.9 0.01 ## [9,] 8 -26.1 0.01 ## [10,] 9 -24.4 0.01 ## Type 3: with drift and trend ## lag ADF p.value ## [1,] 0 -76.9 0.01 ## [2,] 1 -56.3 0.01 ## [3,] 2 -45.0 0.01 ## [4,] 3 -39.3 0.01 ## [5,] 4 -35.7 0.01 ## [6,] 5 -32.4 0.01 ## [7,] 6 -30.0 0.01 ## [8,] 7 -27.9 0.01 ## [9,] 8 -26.1 0.01 ## [10,] 9 -24.4 0.01 ## ---- ## Note: in fact, p.value = 0.01 means p.value &lt;= 0.01 7.3 Graficar ACF-PACF, Escoger los parametros par(mfrow = c(1,1)) acf(df_maiz_filtradots, lag.max = 36) pacf(df_maiz_filtradots, lag.max = 36) 7.4 Definición del modelo #mod &lt;- auto.arima(df_maiz_filtradots) 7.5 Predicción prueba de cambios "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
